/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.Home_Panels;

import MODEL.Product;
import DAO.ProductDAO;
import MODEL.Bill;
import DAO.BillDAO;
import MODEL.BillDetail;
import DAO.BillDetailDAO;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Date;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Cuong
 */
public class Home_BIll extends javax.swing.JPanel {

    /**
     * Creates new form Home_BIll
     */
    public Home_BIll() {
        initComponents();
        filltoTBL_Bill();
        TableEVT();
        txt_Time.setText(currentTimestamp.toString());
        btn_AddProduct.setEnabled(false);
        btn_Done.setEnabled(false);
        btn_Update.setEnabled(false);
        txt_TotalAmount.setEditable(false);
        txt_Time.setEditable(false);

    }
    java.sql.Timestamp currentTimestamp = new java.sql.Timestamp(System.currentTimeMillis());

    ProductDAO PRDao = new ProductDAO();
    List<Product> PRList = PRDao.loadAllProductsData();

    BillDAO BDao = new BillDAO();
    List<Bill> BillList = BDao.loadAllBillsData();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txt_FInd = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_Bill = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txt_BillID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txt_AcountID = new javax.swing.JTextField();
        txt_CustomerID = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txt_TotalAmount = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_BillDetail = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        txt_ProductID = new javax.swing.JTextField();
        txt_Quantity = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        btn_Update = new javax.swing.JButton();
        btn_Done = new javax.swing.JButton();
        btn_New = new javax.swing.JButton();
        btn_AddProduct = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txt_ProductName = new javax.swing.JTextField();
        txt_Price = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        btn_ResetProduct = new javax.swing.JButton();
        txt_Time = new javax.swing.JTextField();

        jLabel1.setText("Tìm Kiếm :");

        tbl_Bill.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Mã HD", "Mã NV", "Thời Gian", "Tổng Tiền"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_Bill.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_BillMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_Bill);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 102, 102));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("LỊCH SỬ HÓA ĐƠN");

        jLabel3.setText("Mã Nhân Viên :");

        jLabel4.setText("Mã Hóa Đơn :");

        jLabel5.setText("Mã Khách Hàng :");

        jLabel6.setText("Thời Gian :");

        txt_CustomerID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_CustomerIDActionPerformed(evt);
            }
        });

        jLabel7.setText("Tổng Tiền :");

        tbl_BillDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã SP", "Tên SP", "Số Lượng", "Đơn Giá", "Thành Tiền"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_BillDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_BillDetailMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbl_BillDetail);

        jLabel8.setText("Mã Sản Phẩm");

        txt_Quantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_QuantityActionPerformed(evt);
            }
        });

        jLabel10.setText("Số Lượng :");

        btn_Update.setText("Cập Nhật");
        btn_Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_UpdateActionPerformed(evt);
            }
        });

        btn_Done.setText("Hoàn Thành");
        btn_Done.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_DoneActionPerformed(evt);
            }
        });

        btn_New.setText("Thêm HD");
        btn_New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_NewActionPerformed(evt);
            }
        });

        btn_AddProduct.setText("Thêm Sản Phẩm");
        btn_AddProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_AddProductActionPerformed(evt);
            }
        });

        jLabel9.setText("Tên Sản Phẩm :");

        txt_Price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_PriceActionPerformed(evt);
            }
        });

        jLabel11.setText("Đơn Giá :");

        btn_ResetProduct.setText("Làm Mới");
        btn_ResetProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ResetProductActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txt_FInd, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txt_AcountID, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txt_BillID, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txt_TotalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(txt_ProductID, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txt_CustomerID, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                            .addComponent(txt_Time))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(56, 56, 56)
                                        .addComponent(jLabel10)
                                        .addGap(18, 18, 18)
                                        .addComponent(txt_Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btn_New, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(50, 50, 50)
                                .addComponent(btn_Update, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(238, 238, 238))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txt_ProductName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(56, 56, 56)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txt_Price, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(btn_AddProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(btn_Done, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(btn_ResetProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 57, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_FInd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txt_BillID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(txt_CustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6)
                            .addComponent(txt_AcountID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_Time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txt_TotalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_Update)
                            .addComponent(btn_New))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txt_ProductID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(txt_Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txt_ProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(txt_Price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_AddProduct)
                            .addComponent(btn_Done)
                            .addComponent(btn_ResetProduct))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void TableEVT() {
        DefaultTableModel modelHDN = (DefaultTableModel) tbl_BillDetail.getModel();
        tbl_BillDetail.getSelectionModel().addListSelectionListener((ListSelectionEvent e) -> {
            int row = tbl_BillDetail.getSelectedRow();
            if (row >= 0) {
                txt_ProductID.setText(modelHDN.getValueAt(row, 0).toString());
                txt_ProductName.setText(modelHDN.getValueAt(row, 1).toString());
                txt_Quantity.setText(modelHDN.getValueAt(row, 2).toString());
                txt_Price.setText(modelHDN.getValueAt(row, 3).toString());
            }
        });

        tbl_BillDetail.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                updateTableInfo(); // Cập nhật thông tin bảng
            }
        });

        // Xử lý sự kiện khi thay đổi giá trị của txt_Quantity
        txt_Quantity.addActionListener(e -> {
            int row = tbl_BillDetail.getSelectedRow();
            if (row >= 0) {
                try {
                    int soLuong = Integer.parseInt(txt_Quantity.getText());
                    int donGia = (int) tbl_BillDetail.getValueAt(row, 3); // Đơn giá
                    int thanhTien = donGia * soLuong;
                    tbl_BillDetail.setValueAt(soLuong, row, 2); // Cập nhật số lượng
                    tbl_BillDetail.setValueAt(thanhTien, row, 4); // Cập nhật thành tiền

                    // Cập nhật tổng tiền
                    updateTotalAmount();
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Số lượng không hợp lệ", "Lỗi", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        JPopupMenu popupMenu = new JPopupMenu();
        JMenuItem deleteItem = new JMenuItem("Delete");
        popupMenu.add(deleteItem);
        DefaultTableModel modelBill = (DefaultTableModel) tbl_BillDetail.getModel();

        // Thêm sự kiện cho menu ngữ cảnh
        deleteItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedRow = tbl_BillDetail.getSelectedRow();
                if (selectedRow != -1) {
                    modelBill.removeRow(selectedRow);
                    updateTotalAmount(); // Cập nhật tổng tiền khi xóa
                }
            }
        });

        // Thêm sự kiện chuột phải để hiển thị menu ngữ cảnh
        tbl_BillDetail.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    int row = tbl_BillDetail.rowAtPoint(e.getPoint());
                    if (row >= 0 && row < tbl_BillDetail.getRowCount()) {
                        tbl_BillDetail.setRowSelectionInterval(row, row);
                    } else {
                        tbl_BillDetail.clearSelection();
                    }

                    int rowindex = tbl_BillDetail.getSelectedRow();
                    if (rowindex < 0) {
                        return;
                    }
                    popupMenu.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        });
    }

    private void updateTableInfo() {
    int row = tbl_BillDetail.getSelectedRow();
    if (row >= 0) {
        // Lấy giá trị từ bảng
        String ProductID = (String) tbl_BillDetail.getValueAt(row, 0); // Cột mã thuốc

        // Kiểm tra kiểu dữ liệu và chuyển đổi nếu cần
        Object donGiaObj = tbl_BillDetail.getValueAt(row, 2); // Cột đơn giá
        int donGia;
        if (donGiaObj instanceof Integer) {
            donGia = (Integer) donGiaObj;
        } else if (donGiaObj instanceof Double) {
            donGia = ((Double) donGiaObj).intValue();
        } else {
            donGia = 0; // Hoặc xử lý lỗi nếu kiểu không đúng
        }

        Object soLuongObj = tbl_BillDetail.getValueAt(row, 3); // Cột số lượng
        int soLuong;
        if (soLuongObj instanceof Integer) {
            soLuong = (Integer) soLuongObj;
        } else if (soLuongObj instanceof Double) {
            soLuong = ((Double) soLuongObj).intValue();
        } else {
            soLuong = 0; // Hoặc xử lý lỗi nếu kiểu không đúng
        }

        // Cập nhật các trường văn bản
        txt_ProductID.setText(ProductID);
        txt_Quantity.setText(String.valueOf(soLuong));

        // Cập nhật thành tiền
        int thanhTien = donGia * soLuong;
        tbl_BillDetail.setValueAt(thanhTien, row, 4); // Cột thành tiền

        // Cập nhật tổng tiền
        updateTotalAmount();
    }
}


    private void updateTotalAmount() {
        int totalAmount = 0;

        for (int i = 0; i < tbl_BillDetail.getRowCount(); i++) {
            Object value = tbl_BillDetail.getValueAt(i, 4); // Cột thành tiền

            // Kiểm tra giá trị null hoặc rỗng trước khi chuyển đổi và cộng vào tổng tiền
            if (value != null && !value.toString().trim().isEmpty()) {
                try {
                    totalAmount += Double.valueOf(value.toString()).intValue();
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Giá trị trong bảng không hợp lệ tại dòng " + (i + 1) + ".", "Lỗi định dạng", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
        }

        txt_TotalAmount.setText(String.valueOf(totalAmount));
    }

    private void addProductToTBL_BillDetail() {
    String productId = txt_ProductID.getText();
    String quantityStr = txt_Quantity.getText();

    if (productId == null || productId.isEmpty() || quantityStr == null || quantityStr.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Vui lòng nhập đầy đủ mã sản phẩm và số lượng.");
        return;
    }

    // Kiểm tra nếu số lượng không phải là số hợp lệ hoặc <= 0
    int quantity;
    try {
        quantity = Integer.parseInt(quantityStr);
        if (quantity <= 0) {
            JOptionPane.showMessageDialog(null, "Số lượng phải lớn hơn 0.");
            return;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Số lượng phải là số nguyên hợp lệ.");
        return;
    }

    // Tìm sản phẩm từ danh sách sản phẩm (PRList)
    Product selectedProduct = PRList.stream()
            .filter(product -> product.getProductId().equals(productId))
            .findFirst()
            .orElse(null);

    // Kiểm tra nếu sản phẩm tồn tại
    if (selectedProduct == null) {
        JOptionPane.showMessageDialog(null, "Không tìm thấy sản phẩm với mã " + productId);
        return;
    }

    // Điền thông tin sản phẩm vào các JTextField
    txt_ProductName.setText(selectedProduct.getProductName());
    txt_Price.setText(String.valueOf(selectedProduct.getPrice()));

    double giaNhap = selectedProduct.getPrice();
    double thanhTien = quantity * giaNhap;

    DefaultTableModel modelBill = (DefaultTableModel) tbl_BillDetail.getModel();
    boolean productExists = false;

    // Kiểm tra xem sản phẩm đã có trong bảng chưa
    for (int i = 0; i < modelBill.getRowCount(); i++) {
        String existingProductID = (String) modelBill.getValueAt(i, 0);
        if (existingProductID.equals(productId)) {
            // Sản phẩm đã có trong bảng, tăng số lượng và cập nhật thành tiền
            int existingQuantity = (int) modelBill.getValueAt(i, 2);
            double existingPrice = (double) modelBill.getValueAt(i, 3);
            double newThanhTien = (existingQuantity + quantity) * existingPrice;

            modelBill.setValueAt(existingQuantity + quantity, i, 2);
            modelBill.setValueAt(newThanhTien, i, 4);

            // Cập nhật tổng tiền
            updateTotalAmount();
            productExists = true;
            break;
        }
    }

    // Nếu sản phẩm không tồn tại trong bảng, thêm mới
    if (!productExists) {
        modelBill.addRow(new Object[]{productId, selectedProduct.getProductName(), quantity, giaNhap, thanhTien});
        updateTotalAmount();
    }

    

    // Hiển thị thông báo
    JOptionPane.showMessageDialog(null, "Thêm Thành Công.");

    // Xóa nội dung trong JTextField sau khi thêm
    txt_ProductID.setText("");
    txt_Quantity.setText("");
    txt_ProductName.setText("");
    txt_Price.setText("");
}




    public void filltoTBL_Bill() {
        DefaultTableModel model = (DefaultTableModel) tbl_Bill.getModel();
        model.setRowCount(0); // Xóa tất cả các hàng hiện có trong bảng

        // Đảm bảo BillList không chứa dữ liệu trùng lặp
        Set<String> seenBillIds = new HashSet<>();
        for (Bill B : BillList) {
            if (!seenBillIds.contains(B.getBillId())) {
                model.addRow(new Object[]{B.getBillId(), B.getAccountId(), B.getCreatedDate(), B.getTotalPrice()});
                seenBillIds.add(B.getBillId());
            }
        }
    }

    public void showDetail() {
        int viewIndex = tbl_Bill.getSelectedRow();
        if (viewIndex == -1) {
            return;
        }

        int modelIndex = tbl_Bill.convertRowIndexToModel(viewIndex);
        if (modelIndex >= 0 && modelIndex < BillList.size()) {
            Bill B = BillList.get(modelIndex); // Lấy hóa đơn nhập từ danh sách

            txt_BillID.setText(B.getBillId());
            txt_CustomerID.setText(B.getCustomerId());
            txt_AcountID.setText(String.valueOf(B.getAccountId()));
            txt_TotalAmount.setText(String.valueOf(B.getTotalPrice()));
            txt_Time.setText(String.valueOf(B.getCreatedDate()));
            showDetailInTblHDN(B);

        }

    }

    private void showDetailInTblHDN(Bill B) {
        DefaultTableModel model = (DefaultTableModel) tbl_BillDetail.getModel();
        model.setRowCount(0); // Xóa dữ liệu cũ trong tblHDN

        for (BillDetail BD : B.getBillDetailList()) {
            Object[] row = {
                BD.getProductId(),
                BD.getNameProduct(),
                BD.getQuantity(),
                BD.getPrice(),
                BD.getSubtotal()
            };
            model.addRow(row);
        }
    }

    private void save() {
        Bill B = new Bill();

        // Kiểm tra mã hóa đơn có tồn tại không
        if (BDao.check(txt_BillID.getText())) {
            try {
                // Thiết lập thông tin cho hóa đơn
                B.setBillId(txt_BillID.getText().trim()); // Mã hóa đơn
                B.setAccountId(Integer.parseInt(txt_AcountID.getText().trim())); // Mã nhân viên
                B.setCustomerId(txt_CustomerID.getText().trim()); // Mã khách hàng

                // Chuyển đổi và gán giá trị tổng tiền từ JTextField
                B.setTotalPrice(Double.parseDouble(txt_TotalAmount.getText().trim())); // Tổng tiền

                // Kiểm tra và thiết lập ngày nhập và ngày viết
                if (txt_Time == null || txt_CustomerID.getText().trim().isEmpty() || txt_AcountID.getText().trim().isEmpty()) {
                    throw new IllegalArgumentException("Ngày, mã khách hàng và mã nhân viên không được để trống.");
                }

                // Thiết lập ngày tạo hóa đơn
                B.setCreatedDate(new java.util.Date()); // Sử dụng thời điểm hiện tại hoặc một giá trị khác nếu cần

                // Thêm chi tiết hóa đơn nhập
                List<BillDetail> chiTietList = new ArrayList<>();
                for (int i = 0; i < tbl_BillDetail.getRowCount(); i++) {
                    BillDetail chitiet = new BillDetail();

                    chitiet.setProductId((String) tbl_BillDetail.getValueAt(i, 0)); // Mã thuốc
                    chitiet.setNameProduct((String) tbl_BillDetail.getValueAt(i, 1)); // Tên thuốc
                    chitiet.setQuantity((int) tbl_BillDetail.getValueAt(i, 2)); // Số lượng
                    chitiet.setPrice((double) tbl_BillDetail.getValueAt(i, 3)); // Giá nhập
                    chitiet.setSubtotal((double) tbl_BillDetail.getValueAt(i, 4)); // Thành tiền

                    chiTietList.add(chitiet);
                }
                B.setBillDetailList(chiTietList);

                // Lưu thông tin hóa đơn vào cơ sở dữ liệu
                int result = BDao.save(B);
                if (result > 0) {
                    JOptionPane.showMessageDialog(null, "Cập nhật thành công");
                    BDao.loadAllBillsData(); // Tải lại danh sách hóa đơn
                    filltoTBL_Bill(); // Cập nhật bảng hiển thị
                } else {
                    JOptionPane.showMessageDialog(this, "Lưu thất bại");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Tổng tiền và số lượng phải là số hợp lệ.");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Mã hóa đơn đã tồn tại.");
        }
    }

    private void update() {
        // Lấy mã hóa đơn nhập từ JTextField
        String billID = txt_BillID.getText().trim();

        // Tìm kiếm hóa đơn nhập cần cập nhật trong danh sách
        Bill BillToUpdate = null;
        for (Bill B : BillList) {
            if (B.getBillId().equals(billID)) {
                BillToUpdate = B;
                break;
            }
        }

        // Nếu không tìm thấy hóa đơn nhập
        if (BillToUpdate == null) {
            JOptionPane.showMessageDialog(this, "Không tìm thấy hóa đơn với mã: " + billID);
            return;
        }

        try {
            // Cập nhật thông tin cho hóa đơn nhập
            BillToUpdate.setAccountId(Integer.parseInt(txt_AcountID.getText().trim()));
            BillToUpdate.setTotalPrice(Double.parseDouble(txt_TotalAmount.getText().trim()));
            BillToUpdate.setCustomerId(txt_CustomerID.getText().trim());

            // Cập nhật ngày nhập và ngày viết
            if (txt_Time == null) {
                throw new IllegalArgumentException("Thời gian không được để trống.");
            }
            BillToUpdate.setCreatedDate(currentTimestamp);

            // Cập nhật chi tiết hóa đơn nhập
            List<BillDetail> chiTietList = new ArrayList<>();
            for (int i = 0; i < tbl_BillDetail.getRowCount(); i++) {
                BillDetail chitiet = new BillDetail();
                chitiet.setProductId((String) tbl_BillDetail.getValueAt(i, 0));
                chitiet.setNameProduct((String) tbl_BillDetail.getValueAt(i, 1));
                chitiet.setQuantity(((Number) tbl_BillDetail.getValueAt(i, 2)).intValue()); // Chuyển đổi kiểu từ Number
                chitiet.setPrice((int) ((Number) tbl_BillDetail.getValueAt(i, 3)).doubleValue()); // Chuyển đổi kiểu từ Number
                chitiet.setSubtotal(((Number) tbl_BillDetail.getValueAt(i, 4)).doubleValue()); // Chuyển đổi kiểu từ Number
                chiTietList.add(chitiet);
            }
            BillToUpdate.setBillDetailList(chiTietList);

            // Cập nhật thông tin vào cơ sở dữ liệu
            int result = BDao.update(BillToUpdate);
            if (result > 0) {
                JOptionPane.showMessageDialog(this, "Cập nhật thành công");
                filltoTBL_Bill(); // Cập nhật lại bảng hiển thị
            } else {
                JOptionPane.showMessageDialog(this, "Cập nhật thất bại");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Dữ liệu nhập vào không hợp lệ: " + e.getMessage());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi: " + e.getMessage());
        }
    }

    private void NewBill() {
        java.sql.Timestamp currentTimestamp = new java.sql.Timestamp(System.currentTimeMillis());
        txt_Time.setText(currentTimestamp.toString());
        DefaultTableModel model = (DefaultTableModel) tbl_BillDetail.getModel();
        model.setRowCount(0); // Xóa dữ liệu cũ trong tblHDN
        txt_BillID.setText(BDao.Maphatsinh());
        txt_AcountID.setText("");
        txt_CustomerID.setText("");
        txt_TotalAmount.setText("");

    }

    private void txt_CustomerIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_CustomerIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_CustomerIDActionPerformed

    private void txt_QuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_QuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_QuantityActionPerformed

    private void btn_DoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_DoneActionPerformed
        // TODO add your handling code here:
        save();
    }//GEN-LAST:event_btn_DoneActionPerformed

    private void btn_NewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_NewActionPerformed
        // TODO add your handling code here:
        NewBill();
        btn_Done.setEnabled(true);
    }//GEN-LAST:event_btn_NewActionPerformed

    private void txt_PriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_PriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_PriceActionPerformed

    private void tbl_BillMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_BillMouseClicked
        // TODO add your handling code here:
        showDetail();
    }//GEN-LAST:event_tbl_BillMouseClicked

    private void btn_AddProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_AddProductActionPerformed
        // TODO add your handling code here:
        addProductToTBL_BillDetail();
    }//GEN-LAST:event_btn_AddProductActionPerformed

    private void btn_ResetProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ResetProductActionPerformed
        // TODO add your handling code here:
        txt_ProductID.setText("");
        txt_Quantity.setText("");
        txt_ProductName.setText("");
        txt_Price.setText("");
        btn_AddProduct.setEnabled(true);
    }//GEN-LAST:event_btn_ResetProductActionPerformed

    private void tbl_BillDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_BillDetailMouseClicked
        // TODO add your handling code here:
        btn_AddProduct.setEnabled(false);
        btn_Update.setEnabled(true);
    }//GEN-LAST:event_tbl_BillDetailMouseClicked

    private void btn_UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_UpdateActionPerformed
        // TODO add your handling code here:
        update();
    }//GEN-LAST:event_btn_UpdateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_AddProduct;
    private javax.swing.JButton btn_Done;
    private javax.swing.JButton btn_New;
    private javax.swing.JButton btn_ResetProduct;
    private javax.swing.JButton btn_Update;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tbl_Bill;
    private javax.swing.JTable tbl_BillDetail;
    private javax.swing.JTextField txt_AcountID;
    private javax.swing.JTextField txt_BillID;
    private javax.swing.JTextField txt_CustomerID;
    private javax.swing.JTextField txt_FInd;
    private javax.swing.JTextField txt_Price;
    private javax.swing.JTextField txt_ProductID;
    private javax.swing.JTextField txt_ProductName;
    private javax.swing.JTextField txt_Quantity;
    private javax.swing.JTextField txt_Time;
    private javax.swing.JTextField txt_TotalAmount;
    // End of variables declaration//GEN-END:variables
}
